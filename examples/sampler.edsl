
component board {
  dimensions {
  width: 10 cm;
  height: 10 cm;
  layers: 2 layer;
  }
}

component ADC {
  datasheet {
  file: "../docs/AD9201.pdf";
  extract: package("PIN CONFIGURATION") as package;
  extract: table("PIN FUNCTION DESCRIPTIONS") as pins;
  extract: table("AD9201-SPECIFICATIONS") as specs;
  extract: outline("OUTLINE DIMENSIONS") as outline;
  }
    
  at: 5 cm, 5 cm rotatable;
}

const ADC_BITS = ADC.specs.RESOLUTION;

component analog_connector {
  type: "single row pin header";
  
  pin P0, P1, P2, P3, P4, P5, P6, P7, P8, P9
  {}
    
  at: 1 cm, 4 cm;
  
  dimensions {
  width: #pins * 2.54 mm;
  height: 2.54 mm;
  }
}


component AGND {
  type:	 "ground";
  pin GND {
    analog_ground;
  }

  at: 1 mm, 1 mm  layer 20;

  dimensions {
  width: 5 cm;	
  height: 9 cm;
  }
}

component DGND {
  type:	 "ground";
  pin GND {
    digital_ground;
  }
  
  at: 55 mm, 1 mm  layer 19;
  
  dimensions {
  width: 4 cm;	
  height: 9 cm;
  }
}

component fpga_connector {
  type: "two row pin header";
  
  pin D9, P1,
      D8, P3,
      D7, P5,
      D6, P7,
      D5, P9,
      D4, GND1,
      D3, P11,
      D2, P13,
      D1, P15,
      D0, P19,
      P20, P21,
      P22, P23,
      P24, P25,
      P26, P27,
      P28, GND2,      
      P30, P31,
      P32, P33,
      P34, P35,      
      P36, P37,
      P38, P39
  {}
  
  at: 9 cm, 4 cm;
  
  dimensions {
  width: #pins * 2.54 mm;
  height: 2.54 mm;
  }
}


component R[x:ADC_BITS] {
 value: 20 ohm;
 type: "SMD resistor";
  pin IN {
    input;
  }
  pin OUT {
    output;
  }
   rotatable;
}

component R5K_1 {
 value: 5000 ohm;
 type: "SMD resistor";
   pin IN {
    input;
  }
  pin OUT {
    output;
  }
   rotatable;
}

component R5K_2 {
 value: 5000 ohm;
 type: "SMD resistor";
   pin IN {
    input;
  }
  pin OUT {
    output;
  }
   rotatable;
}

component C_01_uF_1 {
  value: 0.1 uF;
  type: "SMD condensator";
  pin IN  { input;  }
  pin OUT { output; }
  rotatable;
}
component C_10_uF_1 {
  value: 10 uF;
  type: "SMD condensator";
  pin IN  { input;  }
  pin OUT { output; }
  rotatable;
}

component C_01_uF_2 {
  value: 0.1 uF;
  type: "SMD condensator";
  pin IN  { input;  }
  pin OUT { output; }
  rotatable;
}

component C_10_uF_2 {
  value: 10 uF;
  type: "SMD condensator";
  pin IN  { input;  }
  pin OUT { output; }
  rotatable;
}


component C_01_uF_3 {
  value: 0.1 uF;
  type: "SMD condensator";
  pin IN  { input;  }
  pin OUT { output; }
  rotatable;
}

component C_10_uF_3 {
  value: 10 uF;
  type: "SMD condensator";
  pin IN  { input;  }
  pin OUT { output; }
  rotatable;
}
component C_01_uF_4 {
  value: 0.1 uF;
  type: "SMD condensator";
  pin IN  { input;  }
  pin OUT { output; }
  rotatable;
}
component C_01_uF_5 {
  value: 0.1 uF;
  type: "SMD condensator";
  pin IN  { input;  }
  pin OUT { output; }
  rotatable;
}




component C_01_uF_6 {
  value: 0.1 uF;
  type: "SMD condensator";
  pin IN  { input;  }
  pin OUT { output; }
  rotatable;
}
component C_10_uF_7 {
  value: 10 uF;
  type: "SMD condensator";
  pin IN  { input;  }
  pin OUT { output; }
   rotatable;
}
component C_01_uF_8 {
  value: 0.1 uF;
  type: "SMD condensator";
  pin IN  { input;  }
  pin OUT { output; }
   rotatable;
}
component C_01_uF_9 {
  value: 0.1 uF;
  type: "SMD condensator";
  pin IN  { input;  }
  pin OUT { output; }
   rotatable;
}



// 1V mode, single ended inputs for I/Q channels as per page 11 of AD9201
network ADC_ina1 {
  DGND -> AGND;

  fpga_connector.GND1 -> DGND;
  
  analog_connector.P0 -> ADC.INA_I;
  analog_connector.P1 -> ADC.INA_Q;
  analog_connector.P2 -> AGND;

  ADC.REFSENSE -> C_01_uF_1 -> AGND;
  ADC.REFSENSE -> C_10_uF_1 -> AGND;
  
  ADC.VREF -> ADC.REFSENSE;  
  ADC.VREF -> R5K_1 -> R5K_2 -> AGND;

  R5K_2.IN -> C_01_uF_2 -> AGND;
  R5K_2.IN -> C_10_uF_2 -> AGND;
  
  ADC.INB_I -> R5K_2.IN;
  ADC.INB_Q -> R5K_2.IN;
  
  ADC.REFT_I -> C_01_uF_3.IN  -> C_10_uF_3.IN  -> C_01_uF_4 -> AGND;
  ADC.REFB_I -> C_01_uF_3.OUT -> C_10_uF_3.OUT -> C_01_uF_5 -> AGND;

  ADC.REFT_Q -> C_01_uF_6.IN  -> C_10_uF_7.IN  -> C_01_uF_8 -> AGND;
  ADC.REFB_Q -> C_01_uF_6.OUT -> C_10_uF_7.OUT -> C_01_uF_9 -> AGND;
}

network ADC_to_connector[x:ADC_BITS] {
  ADC.D[x] -> R[x] -> fpga_connector.D[x];
}

//----- constraints section:

constraint equal_lengths_for_ADC_to_connector {
  for i in ADC_BITS {

      require[0] len(R[i].OUT -> fpga_connector.D[i]) == 3mm;

      for j in ADC_BITS {
	  if i < j {
	      require[1] len(ADC.D[i] -> R[i].IN)
		 == len(ADC.D[j] -> R[j].IN);
	  }
	}
    }
}


strategy meandering {
  for j in ADC_BITS {
        ADC_to_Rx[j].meander();
    }
}


