grammar dsl;

startRule: directive* EOF;

directive: component | network | constraint | strategy | constant;

// ---- CONSTANT -----

constant: 'const' ID '=' expr ';';

// ---- STRATEGY -----

strategy: 'strategy' ID '{' strategy_property* '}';

strategy_property: strategy_foreach | strategy_call;

strategy_foreach: 'for' ID 'in' ID '{' strategy_property* '}';

strategy_call: access '('  ')' ';' ;

// ---- CONSTRAINT -----

constraint: 'constraint' ID '{' constraint_property* '}';

constraint_property: constraint_foreach | constraint_require;

constraint_foreach: 'for' ID 'in' ID '{' constraint_property* '}';

constraint_require: 'require' expr ';';

// ---- CONNECTION -----

network: 'network' object_name '{' connection* '}';

connection: access ('->' access)+ ';' ;


// ---- COMPONENT -----

object_name: ID ('[' ID ':' ID ']')?
    ;
        
component: 'component' object_name '{' component_property*  '}';

component_property:
        'dimensions' '{' dim_prop* '}'
    |   'datasheet'  '{' datasheet_prop* '}'
    |   'location'   '{' location_prop* '}'
    |   'pin'  pin_name   '{' pin_prop* '}'
    |   'value' ':' expr ';'
    ;

pin_name: ID (',' ID)* ;

pin_prop: ('input' | 'output' | 'digital_ground' | 'analog_ground') ';';

location_prop:
        from_tok='from' ':' expr ',' expr ';'
    |   to_tok='to'   ':' expr ',' expr ';'
    ;

datasheet_prop:
        'extract' ':' extractor=ID '(' title=STRING ')' 'as' table=ID ';'
    |   'file'    ':' filename=STRING ';'
    ;

dim_prop: 'width'  ':' expr ';'
    |     'height' ':' expr ';'
    |     'layers' ':' expr ';'
    ;


// ---- EXPR -----

primary:
        n=NUMBER unit
    |   '(' expr ')'
    |   access
    ;
        

expr: primary (op primary)?
    ;

op: '==' | '!= ' | '<' | '>' | '<=' | '>=' | '+' | '-' | '*' | '/';

access: ID index? access_suffix*
    ;

access_suffix: ('.' ID index?)
    ;	   

index: '[' ID ']';


unit: name='cm'
    | name='mm'
    | name='layer'
    | name='ohm'
    | name='uF'
    ;

// ---- TOKENS ----

STRING
   : '"' ~ ["\r\n]* '"'
   ;

ID: [a-zA-Z][_a-zA-Z0-9]*;

NUMBER: [0-9]+ ('.' [0-9]+)?;

WS: [ \r\n\t]+ -> skip
   ;


COMMENT: '/*' .*? '*/' -> skip
    ;

LINE_COMMENT: '//' ~[\r\n]* -> skip
    ;
